#!/usr/bin/env perl
# ABSTRACT: An API from the legacy Metabase::Web to the local database

=head1 SYNOPSIS

=head1 DESCRIPTION

=head1 SEE ALSO

=cut

package CPANTesters::Web::Legacy::Metabase;
use v5.24;
use Mojo::Base '-base';
use experimental 'signatures', 'postderef';
use Mojo::File 'path';
use Mojolicious::Lite;
use Data::FlexSerializer;
use Metabase::Fact;
use Mojo::JSON qw( to_json from_json );
use FindBin ();
use CPAN::Testers::Schema;

=head1 CONFIG

The configuration file is set by the C<MOJO_CONFIG> environment
variable, or found in the C<etc/> directory and named C<metabase.conf>
or C<metabase.$mode.conf>. The configuration is a hashref with the
following keys:

=head2 db

The C<db> hashref contains the C<dsn>, C<user>, and C<pass> to connect
to the database.

To create a database for local testing (C<-m local>), run
C<< sqlite3 local.db < eg/legacy/schema.sql >>.

=cut

app->home( path( $FindBin::Bin )->dirname ) unless $ENV{MOJO_HOME};
app->moniker( 'metabase' );
my $root_conf = app->home->child( sprintf 'etc/%s.conf', app->moniker );
plugin Config => (
    file => $ENV{MOJO_CONFIG} || $root_conf,
);

=attr schema

The schema to write reports to. Defaults to a new L<CPAN::Testers::Schema>
object.

=cut

helper schema => sub {
    my ( $c, $new_schema ) = @_;
    state $schema = $new_schema || CPAN::Testers::Schema->connect( $c->app->config->{db}->@{qw( dsn user pass )} );
    $schema = $new_schema if $new_schema;
    return $schema;
};

=route /beta/submit/CPAN-Testers-Metabase

=route /api/v1/submit/CPAN-Testers-Metabase

This route submits a new report into the local copy of the Metabase.
This is a shim that will remain in-place until all the CPAN Testers clients
are updated to submit reports via the new API (so, forever).

=cut

# This code was derived from CPAN::Testers::Data::Generator sub cache_report
# Once this is working, we can force CPAN::Testers::Data::Generator to
# ignore the Amazon SimpleDB Metabase by making the localonly flag
# always set to true.

# We are also mimicking parts of Metabase::Web and Metabase::Gateway

sub handle_post {
    my ( $c ) = @_;
    my $body = $c->req->json;
    my $row = $c->schema->resultset( 'Report' )->insert_metabase_data( $body );
    $c->res->headers->location( '/guid/' . $row->guid );
    return $c->render(
        status => 201,
        json => { guid => $row->guid },
    );
};

post '/api/v1/submit/CPAN-Testers-Metabase' => \&handle_post;
post '/beta/submit/CPAN-Testers-Metabase' => \&handle_post;

app->start;
